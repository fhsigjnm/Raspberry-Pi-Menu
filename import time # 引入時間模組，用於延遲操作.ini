import time                                 # 引入時間模組，用於延遲操作
import board                                # 引入樹莓派的硬體板模組
import RPi.GPIO as GPIO                     # 引入GPIO控制模組，用於控制引腳
import busio                                # 引入I2C通訊模組
import adafruit_ssd1306                     # 引入Adafruit SSD1306 OLED顯示器驅動程式
from PIL import Image, ImageDraw, ImageFont # 引入圖片處理模組，用於顯示文字
from rpi_ws281x import PixelStrip, Color    # 引入WS281x LED控制模組
from gpiozero import Button                 # 引入GPIOZero模組，用於處理按鈕
import argparse                             # 引入命令列解析模組

BTN_UP = 17                                 # 定義向上按鈕的GPIO引腳
BTN_DOWN = 27                               # 定義向上按鈕的GPIO引腳
BTN_ENTER = 22                              # 定義確認按鈕的GPIO引腳
BTN_EXIT = 23                               # 定義退出按鈕的GPIO引腳
LED_COUNT = 16                              # 定義LED數量   
LED_PIN = 18                                # 定義LED的GPIO引腳   
LED_FREQ_HZ = 800000                        # 設定LED的頻率
LED_DMA = 10                                # 定義DMA通道   
LED_BRIGHTNESS = 255                        # 設定LED亮度
LED_INVERT = False                          # 設定是否反轉LED顏色  
LED_CHANNEL = 0                             # 設定LED通道   
button_enter = Button(BTN_ENTER)            # 創建按鈕對象，用於監聽ENTER按鈕
is_running = False                          # 初始化運行標誌，表示程式是否正在運行

ENTER_PIN = BTN_ENTER                       # 定義ENTER按鈕引腳

GPIO.setmode(GPIO.BCM)                                   # 設定GPIO使用BCM編號模式
GPIO.setup(BTN_UP, GPIO.IN, pull_up_down=GPIO.PUD_UP)    # 設置BTN_UP為輸入並啟用上拉電阻
GPIO.setup(BTN_DOWN, GPIO.IN, pull_up_down=GPIO.PUD_UP)  # 設置BTN_DOWN為輸入並啟用上拉電阻
GPIO.setup(BTN_ENTER, GPIO.IN, pull_up_down=GPIO.PUD_UP) # 設置BTN_ENTER為輸入並啟用上拉電阻
GPIO.setup(BTN_EXIT, GPIO.IN, pull_up_down=GPIO.PUD_UP)  # 設置BTN_EXIT為輸入並啟用上拉電阻

i2c = busio.I2C(board.SCL, board.SDA)                # 初始化I2C通訊
display = adafruit_ssd1306.SSD1306_I2C(128, 64, i2c) # 初始化SSD1306 OLED顯示器
strip = PixelStrip(LED_COUNT, LED_PIN, LED_FREQ_HZ, LED_DMA, LED_INVERT, LED_BRIGHTNESS, LED_CHANNEL) # 初始化WS281x LED條
strip.begin()                                        # 開始LED條初始化


image = Image.new('1', (128, 64)) # 創建一個128x64像素的圖像，用來顯示在OLED
draw = ImageDraw.Draw(image)      # 創建一個繪圖對象，用來在圖像上繪製
font = ImageFont.load_default()   # 加載預設字體

led_on = False  # 初始化LED開關狀態
led_mode = None # 初始化LED顯示模式

fun_index = 0   # 初始化功能索引
key_up = True   # 初始化按鈕狀態，按鈕未被按下

segments = {    # 設置七段顯示器各段的GPIO引腳
    'a': 25,    # GPIO 25
    'b': 5,     # GPIO 5
    'c': 6,     # GPIO 6
    'd': 12,    # GPIO 12
    'e': 13,    # GPIO 13
    'f': 14,    # GPIO 14
    'g': 15,    # GPIO 15
    'x': 16,    # GPIO 16
    'dp': 19,   # GPIO 19 
    '1': 20,    # GPIO 20
    '2': 21,    # GPIO 21
    '3': 26     # GPIO 26
}
# 設置七段顯示器每段的GPIO為輸出模式
for segment in segments.values():
    GPIO.setup(segment, GPIO.OUT, initial=GPIO.LOW)
# 定義顯示數字和字母的映射關係
digit_map = {
    '0': ['a', 'b', 'c', 'd', 'e', 'f'],       # 0
    '1': ['b', 'c'],                           # 1
    '2': ['a', 'b', 'd', 'e', 'g'],            # 2
    '3': ['a', 'b', 'c', 'd', 'g'],            # 3
    '4': ['b', 'c', 'f', 'g'],                 # 4
    '5': ['a', 'c', 'd', 'f', 'g'],            # 5
    '6': ['a', 'c', 'd', 'e', 'f', 'g'],       # 6
    '7': ['a', 'b', 'c'],                      # 7
    '8': ['a', 'b', 'c', 'd', 'e', 'f', 'g'],  # 8
    '9': ['a', 'b', 'c', 'd', 'f', 'g'],       # 9
    'A': ['a'],                                # A
    'B': ['b'],                                # B
    'C': ['c'],                                # C
    'D': ['d'],                                # D
    'E': ['e'],                                # E
    'F': ['f'],                                # F
    'G': ['g'],                                # G
    'dp':['dp'],                               #.
    'OFF': [0, 0, 0, 0, 0, 0, 0, 0] # 全部段顯示為關閉
}
# 設置七段顯示器引腳為輸出
for pin in segments.values():
    GPIO.setup(pin, GPIO.OUT)
# 顯示數字的函數
def display_digit(digit):
    for pin in segments.values():
        GPIO.output(pin, GPIO.LOW) # 將所有段設為低電平，關閉顯示
    

    segments_state = digit_map[digit] # 根據數字映射獲得需要點亮的段
    for segment in segments_state:
        GPIO.output(segments[segment], GPIO.HIGH) # 點亮對應的段

# 顯示菜單11
def menu11():
    print("menu11 is being displayed")
    draw.rectangle((0, 0, 128, 64), outline=0, fill=0) # 清空顯示區域 
    draw.text((0, 0), "     ", fill=255)               # 顯示標題(無)
    draw.text((0, 20), "-> RGB", fill=255)             # 顯示菜單選項
    draw.text((0, 40), "   Seven sections", fill=255)  # 顯示菜單選項
    display.image(image)                               # 將圖像顯示到OLED
    display.show()
# 顯示菜單12
def menu12():
    print("menu12 is being displayed")
    draw.rectangle((0, 0, 128, 64), outline=0, fill=0) 
    draw.text((0, 0), "      ", fill=255)              
    draw.text((0, 20), "   RGB", fill=255)             
    draw.text((0, 40), "-> Seven sections", fill=255)  
    display.image(image)                               
    display.show()  

def menu21():
    global led_on, led_mode                           
    print("menu21 is being displayed")
    draw.rectangle((0, 0, 128, 64), outline=0, fill=0) 
    draw.text((0, 0), "-> All light", fill=255)       
    draw.text((0, 20), "   running water", fill=255)  
    draw.text((0, 40), "   RGB", fill=255)             
    display.image(image)                            
    display.show()

    if button_enter.is_pressed:                        # 檢查ENTER按鈕是否被按下
        while button_enter.is_pressed:                 # 等待按鈕放開
            time.sleep(0.1)                            # 暫停，避免過多的按鈕檢查
        if led_mode != 'white':                        # 如果LED模式不是白色
            led_mode = 'white'                         # 設置LED模式為白色
            led_on = True                              # 設置LED為開啟
            for i in range(strip.numPixels()):         # 設置每個LED為白色
                strip.setPixelColor(i, Color(255, 255, 255))
            strip.show()                               # 更新LED顯示

            while True:                                # 持續顯示白色
                if button_enter.is_pressed:            # 檢查ENTER按鈕是否被按下
                    while button_enter.is_pressed:     # 等待按鈕放開
                        time.sleep(0.1)                # 暫停，避免過多的按鈕檢查
                    led_mode = None                    # 重設LED模式
                    led_on = False                     # 設置LED為關閉
                    for i in range(strip.numPixels()): # 設置每個LED
                        strip.setPixelColor(i, Color(0, 0, 0)) # 關閉所有LED
                    strip.show()                       # 更新LED顯示，讓變化生效
                    break                              # 跳出循環，結束白色顯示


def menu22():                                          
    global led_on, led_mode                            
    print("menu22 is being displayed")                
    draw.rectangle((0, 0, 128, 64), outline=0, fill=0) 
    draw.text((0, 0),  "   All light", fill=255)       
    draw.text((0, 20), "-> running water", fill=255)   
    draw.text((0, 40), "   RGB", fill=255)            
    display.image(image)                            
    display.show()                                                         

    if button_enter.is_pressed:                        # 檢查 ENTER 按鈕是否被按下
        while button_enter.is_pressed:                 # 等待按鈕放開
            time.sleep(0.1)
        if led_mode != 'water':                        # 如果 LED 模式不是 'water'，則進入水流模式
            led_mode = 'water'                         # 設置 LED 模式為 'water'
            led_on = True                              # 開啟 LED
            while led_mode == 'water':                 # 持續顯示水流效果
                for i in range(strip.numPixels()):     # 設置每個LED
                    strip.setPixelColor(i, Color(0, 0, 255)) # 設置每個 LED 為藍色（模擬水流效果） 
                    strip.show()                       # 更新 LED 顯示
                    time.sleep(0.1)                    # 暫停一段時間，模擬水流的效果
                    strip.setPixelColor(i, Color(0, 0, 0)) # 關閉當前的 LED
                if button_enter.is_pressed:            # 檢查 ENTER 按鈕是否被按下
                    while button_enter.is_pressed:     # 等待按鈕放開                   
                        time.sleep(0.1)      
                    led_mode = None                    # 重設 LED 模式
                    led_on = False                     # 設置 LED 為關閉
                    for i in range(strip.numPixels()): # 設定所有 LED，將其設為關閉
                        strip.setPixelColor(i, Color(0, 0, 0)) # 關閉所有 LED
                    strip.show()                       # 更新 LED 顯示
                    break                              # 跳出循環，停止水流效果
    else:                                              # 如果 ENTER 按鈕未被按下
        led_mode = None                                # 重設 LED 模式
        led_on = False                                 # 設置 LED 為關閉         
        for i in range(strip.numPixels()):             # 設定所有 LED，將其設為關閉
            strip.setPixelColor(i, Color(0, 0, 0))     # 關閉所有 LED
        strip.show()                                   # 更新 LED 顯示
 

def menu23():                                          
    global led_on, led_mode                           
    print("menu23 is being displayed")                
    draw.rectangle((0, 0, 128, 64), outline=0, fill=0)
    draw.text((0, 0), "   All light", fill=255)
    draw.text((0, 20), "   running water", fill=255)
    draw.text((0, 40), "-> RGB ", fill=255)
    display.image(image)
    display.show()

    if button_enter.is_pressed:                        # 檢查 ENTER 按鈕是否被按下            
        while button_enter.is_pressed:                 # 等待按鈕被釋放
            time.sleep(0.1)

        if led_mode != 'RGB Gradient':                 # 如果當前 LED 模式不是 RGB 漸變模式，進入該模式
            led_mode = 'RGB Gradient'                  # 設置 LED 模式為 RGB 漸變
            led_on = True                              # 啟動 LED

            red = 255                                  # 初始化 RGB 顏色值
            green = 0
            blue = 0

            while led_mode == 'RGB Gradient':          # 持續執行 RGB 漸變模式
                for i in range(strip.numPixels()):     # 遍歷 LED 條帶中的每個 LED，設定其顏色
                    strip.setPixelColor(i, Color(red, green, blue))  # 設置顏色
                strip.show()                           # 更新顯示

                if red > 0 and blue == 0:              # 從紅色過渡到綠色
                    red -= 5
                    green += 5
                elif green > 0 and red == 0:           # 從綠色過渡到藍色
                    green -= 5
                    blue += 5
                elif blue > 0 and green == 0:          # 從藍色過渡到紅色
                    blue -= 5
                    red += 5

                red = max(0, min(255, red))            # 限制顏色值範圍在 0-255 之間，避免溢出
                green = max(0, min(255, green))
                blue = max(0, min(255, blue))

                time.sleep(0.05)                       # 控制漸變速度

                if button_enter.is_pressed:            # 檢查是否再次按下 ENTER 按鈕
                    while button_enter.is_pressed:     # 等待按鈕被釋放
                        time.sleep(0.1)
                    led_mode = None                    # 結束 RGB 漸變模式，關閉 LED-
                    led_on = False
                    for i in range(strip.numPixels()): # 設定所有 LED，將其關閉
                        strip.setPixelColor(i, Color(0, 0, 0))  # 設置為關閉
                    strip.show()                       # 更新顯示
                    break                              # 跳出循環
    else:                                              # 如果 ENTER 按鈕未被按下
        led_mode = None                                # 重置 LED 模式
        led_on = False                                 # 關閉 LED
        for i in range(strip.numPixels()):             # 設定所有 LED，將其關閉
            strip.setPixelColor(i, Color(0, 0, 0))     # 設置為關閉
        strip.show()                                   # 更新顯示

def menu24():
    print("menu24 is being displayed")
    draw.rectangle((0, 0, 128, 64), outline=0, fill=0) 
    draw.text((0, 0), " ", fill=255)  
    draw.text((0, 20), "-> 0~9", fill=255)  
    draw.text((0, 40), "   A~G", fill=255) 
    display.image(image) 
    display.show()  

def menu25():
    print("menu25 is being displayed")
    draw.rectangle((0, 0, 128, 64), outline=0, fill=0) 
    draw.text((0, 0), "  ", fill=255) 
    draw.text((0, 20), "   0~9", fill=255)  
    draw.text((0, 40), "-> A~G", fill=255)  
    display.image(image)  
    display.show()  

def menu31():
    print("menu31 is being displayed")
    draw.rectangle((0, 0, 128, 64), outline=0, fill=0) 
    draw.text((0, 0), "  ", fill=255)  
    draw.text((0, 20), "-> individual 0~9", fill=255)  
    draw.text((0, 40), "   continuous 0~9", fill=255) 
    display.image(image)  
    display.show()  

def menu32():
    global is_running                                  # 聲明全局變量 is_running，用於控制是否持續顯示數字                
    print("menu32 is being displayed")
    draw.rectangle((0, 0, 128, 64), outline=0, fill=0) 
    draw.text((0, 0), "  ", fill=255)
    draw.text((0, 20), "   individual 0~9", fill=255)
    draw.text((0, 40), "-> continuous 0~9", fill=255)
    display.image(image)
    display.show()
    
    while True:                                        # 持續執行該菜單邏輯     
        if button_enter.is_pressed:                    # 檢查是否按下 ENTER 按鈕
            while button_enter.is_pressed:             # 等待按鈕被釋放
                time.sleep(0.1) 
            is_running = not is_running                # 切換 is_running 狀態 (啟動或停止顯示)
            
            if is_running:                             # 如果啟動顯示數字的模式
                print("Displaying numbers 0~9 continuously.")  # 提示開始持續顯示數字
                while is_running:                      # 當 is_running 為 True 時，執行循環顯示數字
                    for digit in range(10):            # 設定數字 0 到 9
                        if button_enter.is_pressed:    # 檢查是否再次按下 ENTER 按鈕
                            while button_enter.is_pressed: # 等待按鈕被釋放
                                time.sleep(0.1)
                            print("Exiting menu34")    # 提示退出菜單
                            is_running = False         # 停止顯示數字
                            for pin in segments.values(): # 將所有數碼顯示的 GPIO 引腳設置為高電平，關閉顯示
                                GPIO.output(pin, GPIO.HIGH)
                            return                     # 返回菜單上層或結束當前函數
                        
                        display_digit(str(digit))      # 在顯示器上顯示當前數字
                        time.sleep(0.5)                # 控制數字切換的速度（間隔 0.5 秒）
            else: 
                print("Stopped displaying numbers.")   # 提示停止顯示數字
                for pin in segments.values():          # 將所有數碼顯示的 GPIO 引腳設置為高電平，關閉顯示
                    GPIO.output(pin, GPIO.HIGH)
                return                                 # 返回菜單上層或結束當前函數


def menu33():
    print("menu33 is being displayed")
    draw.rectangle((0, 0, 128, 64), outline=0, fill=0)
    draw.text((0, 0), "  ", fill=255)  
    draw.text((0, 20), "-> individual A~G", fill=255)  
    draw.text((0, 40), "   continuous A~G", fill=255)  
    display.image(image)  
    display.show()  

is_running = False  

def menu34():
    global is_running
    print("menu34 is being displayed")
    

    draw.rectangle((0, 0, 128, 64), outline=0, fill=0)
    draw.text((0, 0), "  ", fill=255)
    draw.text((0, 20), "   individual A~G", fill=255) 
    draw.text((0, 40), "-> continuous A~G", fill=255) 
    display.image(image)
    display.show()
    
    while True:                                        # 持續執行該菜單邏輯       
        if button_enter.is_pressed:                    # 檢查是否按下 ENTER 按鈕
            while button_enter.is_pressed:             # 等待按鈕被釋放
                time.sleep(0.1)  
            is_running = not is_running                # 切換 is_running 狀態 (啟動或停止顯示)
            
            if is_running:                             # 如果啟動顯示字母的模式
                print("Displaying letters A~G and dp continuously.") # 提示開始持續顯示字母
                while is_running:                      # 當 is_running 為 True 時，執行循環顯示字母
                    for letter in ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'dp']:  # 設定字母 A 到 G 和 dp (小數點)
                        if button_enter.is_pressed:    # 檢查是否再次按下 ENTER 按鈕
                            while button_enter.is_pressed: # 等待按鈕被釋放
                                time.sleep(0.1)
                            print("Exiting menu34")    # 提示退出菜單
                            is_running = False         # 停止顯示字母
                            for pin in segments.values():  # 將所有數碼顯示的 GPIO 引腳設置為高電平，關閉顯示
                                GPIO.output(pin, GPIO.HIGH)
                            return                     # 返回菜單上層或結束當前函數
                        
                        display_digit(letter)          # 在顯示器上顯示當前字母或小數點
                        time.sleep(0.5)                # 控制切換的速度（間隔 0.5 秒）
            else:
                print("Stopped displaying letters.")   # 提示停止顯示字母
                for pin in segments.values():          # 將所有數碼顯示的 GPIO 引腳設置為高電平，關閉顯示
                    GPIO.output(pin, GPIO.HIGH)
                return                                 # 返回菜單上層或結束當前函數


def key_scan():
    global key_up                                      # 聲明全局變量 key_up，用於控制按鍵是否已鬆開，防止重複觸發
    # 檢查 key_up 狀態，確保只有在按鍵完全鬆開後才處理新的按鍵按下事件
    if key_up:                                         # 檢查 key_up 狀態，確保只有在按鍵完全鬆開後才處理新的按鍵按下事件
        # 檢查按鍵 BTN_UP 是否被按下
        if GPIO.input(BTN_UP) == GPIO.LOW:             # 檢查按鍵 BTN_UP 是否被按下
            key_up = False                             # 標記按鍵進入按下狀態，避免重複觸發
            print("Button UP pressed")                 # 輸出按下 BTN_UP 的提示
            return 4                                   # 返回代碼 4 表示 "向上" 按鈕被按下
        # 檢查按鍵 BTN_DOWN 是否被按下
        elif GPIO.input(BTN_DOWN) == GPIO.LOW:         # 檢查按鍵 BTN_DOWN 是否被按下
            key_up = False                             # 標記按鍵進入按下狀態
            print("Button DOWN pressed")               # 輸出按下 BTN_DOWN 的提示
            return 3                                   # 返回代碼 3 表示 "向下" 按鈕被按下
        # 檢查按鍵 BTN_ENTER 是否被按下
        elif GPIO.input(BTN_ENTER) == GPIO.LOW:        # 檢查按鍵 BTN_ENTER 是否被按下
            key_up = False                             # 標記按鍵進入按下狀態
            print("Button ENTER pressed")              # 輸出按下 BTN_ENTER 的提示
            return 1                                   # 返回代碼 1 表示 "確定" 按鈕被按下
        # 檢查按鍵 BTN_EXIT 是否被按下
        elif GPIO.input(BTN_EXIT) == GPIO.LOW:         # 檢查按鍵 BTN_EXIT 是否被按下
            key_up = False                             # 標記按鍵進入按下狀態
            print("Button EXIT pressed")               # 輸出按下 BTN_EXIT 的提示
            return 2                                   # 返回代碼 2 表示 "退出" 按鈕被按下
        # 如果所有按鍵均未被按下（所有按鈕均處於高電位狀態） 
    if (GPIO.input(BTN_UP) == GPIO.HIGH and            # BTN_UP 未被按下       
        GPIO.input(BTN_DOWN) == GPIO.HIGH and          # BTN_DOWN 未被按下
        GPIO.input(BTN_ENTER) == GPIO.HIGH and         # BTN_ENTER 未被按下
        GPIO.input(BTN_EXIT) == GPIO.HIGH):            # BTN_EXIT 未被按下
        key_up = True                                  # 將 key_up 標記為 True，表明按鍵已完全鬆開
        print("All buttons released")                  # 輸出所有按鈕鬆開的提示
    return 0    


key_table = [                                          #menuXX上下左右對應的菜單
    {'up': 0, 'down': 1, 'enter': 2, 'exit': 0, 'operation': menu11},
    {'up': 0, 'down': 1, 'enter': 5, 'exit': 0, 'operation': menu12},
    {'up': 2, 'down': 3, 'enter': 2, 'exit': 0, 'operation': menu21},
    {'up': 2, 'down': 4, 'enter': 3, 'exit': 0, 'operation': menu22},
    {'up': 3, 'down': 4, 'enter': 4, 'exit': 0, 'operation': menu23},
    {'up': 5, 'down': 6, 'enter': 7, 'exit': 1, 'operation': menu24},
    {'up': 5, 'down': 6, 'enter': 9, 'exit': 1, 'operation': menu25},
    {'up': 7, 'down': 8, 'enter': 7, 'exit': 5, 'operation': menu31},
    {'up': 7, 'down': 8, 'enter': 8, 'exit': 5, 'operation': menu32},
    {'up': 9, 'down': 10, 'enter': 9, 'exit': 6, 'operation': menu33},
    {'up': 9, 'down': 10, 'enter': 10, 'exit': 6, 'operation': menu34},
]

def run_menu():
    global fun_index                                   # 追蹤當前的功能索引，指向當前菜單
    key_input = key_scan()                             # 獲取用戶輸入的按鍵（如：UP、DOWN、ENTER、EXIT）
    print(f"Current fun_index: {fun_index}")           # 顯示當前菜單的索引，幫助調試
    # 根據按下的按鍵執行不同的操作
    if key_input == 4:                                 # UP (當 UP 鍵被按下)
        print(f"Going UP to {key_table[fun_index]['up']}") # 顯示將轉向的上級菜單
        fun_index = key_table[fun_index]['up']         # 根據目前菜單的 'up' 欄位設定菜單索引
        key_table[fun_index]['operation']()            # 執行對應菜單的操作函數
    elif key_input == 3:                               # DOWN (當 DOWN 鍵被按下)
        print(f"Going DOWN to {key_table[fun_index]['down']}") # 顯示將轉向的下級菜單
        fun_index = key_table[fun_index]['down']       # 根據目前菜單的 'down' 欄位設定菜單索引
        key_table[fun_index]['operation']()            # 執行對應菜單的操作函數
    elif key_input == 1:                               # ENTER (當 ENTER 鍵被按下)
        print(f"ENTER pressed at menu {fun_index}")    # 顯示當前菜單索引
        fun_index = key_table[fun_index]['enter']      # 根據目前菜單的 'enter' 欄位設定菜單索引
        key_table[fun_index]['operation']()            # 執行對應菜單的操作函數
    elif key_input == 2:                               # EXIT (當 EXIT 鍵被按下)
        print(f"EXIT pressed at menu {fun_index}")     # 顯示當前菜單索引
        fun_index = key_table[fun_index]['exit']       # 根據目前菜單的 'exit' 欄位設定菜單索引
        key_table[fun_index]['operation']()            # 執行對應菜單的操作函數


    
menu11()                                               # 顯示菜單 11，這會初始化第一個菜單並顯示它

try:                                                   
    while True:                                        # 使用無窮迴圈來不斷運行菜單系統，直到用戶中斷
        run_menu()                                     # 調用 run_menu 函數處理按鍵輸入並執行對應的菜單操作
        time.sleep(0.01)                               # 短暫延遲，防止 CPU 過度運行，並減少高頻次輪詢按鍵的負擔
except KeyboardInterrupt:                              # 捕獲使用者手動中斷（Ctrl+C），並顯示結束訊息
    print("Program terminated")
finally:
    GPIO.cleanup()                                     # 無論程式是否正常終止，都會執行 GPIO.cleanup() 清理 GPIO 引腳的狀態，防止硬體狀態不一致